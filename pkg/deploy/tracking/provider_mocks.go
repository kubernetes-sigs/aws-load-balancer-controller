// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/deploy/tracking (interfaces: Provider)

// Package tracking is a generated GoMock package.
package tracking

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "sigs.k8s.io/aws-load-balancer-controller/pkg/model/core"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// LegacyTagKeys mocks base method.
func (m *MockProvider) LegacyTagKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyTagKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LegacyTagKeys indicates an expected call of LegacyTagKeys.
func (mr *MockProviderMockRecorder) LegacyTagKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyTagKeys", reflect.TypeOf((*MockProvider)(nil).LegacyTagKeys))
}

// ResourceIDTagKey mocks base method.
func (m *MockProvider) ResourceIDTagKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceIDTagKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceIDTagKey indicates an expected call of ResourceIDTagKey.
func (mr *MockProviderMockRecorder) ResourceIDTagKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceIDTagKey", reflect.TypeOf((*MockProvider)(nil).ResourceIDTagKey))
}

// ResourceTags mocks base method.
func (m *MockProvider) ResourceTags(arg0 core.Stack, arg1 core.Resource, arg2 map[string]string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ResourceTags indicates an expected call of ResourceTags.
func (mr *MockProviderMockRecorder) ResourceTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceTags", reflect.TypeOf((*MockProvider)(nil).ResourceTags), arg0, arg1, arg2)
}

// StackLabels mocks base method.
func (m *MockProvider) StackLabels(arg0 core.Stack) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackLabels", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// StackLabels indicates an expected call of StackLabels.
func (mr *MockProviderMockRecorder) StackLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackLabels", reflect.TypeOf((*MockProvider)(nil).StackLabels), arg0)
}

// StackTags mocks base method.
func (m *MockProvider) StackTags(arg0 core.Stack) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackTags", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// StackTags indicates an expected call of StackTags.
func (mr *MockProviderMockRecorder) StackTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackTags", reflect.TypeOf((*MockProvider)(nil).StackTags), arg0)
}

// StackTagsLegacy mocks base method.
func (m *MockProvider) StackTagsLegacy(arg0 core.Stack) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackTagsLegacy", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// StackTagsLegacy indicates an expected call of StackTagsLegacy.
func (mr *MockProviderMockRecorder) StackTagsLegacy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackTagsLegacy", reflect.TypeOf((*MockProvider)(nil).StackTagsLegacy), arg0)
}
