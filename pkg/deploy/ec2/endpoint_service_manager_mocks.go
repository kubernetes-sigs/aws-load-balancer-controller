// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/deploy/ec2 (interfaces: EndpointServiceManager)

// Package ec2 is a generated GoMock package.
package ec2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ec2 "sigs.k8s.io/aws-load-balancer-controller/pkg/model/ec2"
	networking "sigs.k8s.io/aws-load-balancer-controller/pkg/networking"
)

// MockEndpointServiceManager is a mock of EndpointServiceManager interface.
type MockEndpointServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointServiceManagerMockRecorder
}

// MockEndpointServiceManagerMockRecorder is the mock recorder for MockEndpointServiceManager.
type MockEndpointServiceManagerMockRecorder struct {
	mock *MockEndpointServiceManager
}

// NewMockEndpointServiceManager creates a new mock instance.
func NewMockEndpointServiceManager(ctrl *gomock.Controller) *MockEndpointServiceManager {
	mock := &MockEndpointServiceManager{ctrl: ctrl}
	mock.recorder = &MockEndpointServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointServiceManager) EXPECT() *MockEndpointServiceManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEndpointServiceManager) Create(arg0 context.Context, arg1 *ec2.VPCEndpointService) (ec2.VPCEndpointServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(ec2.VPCEndpointServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEndpointServiceManagerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEndpointServiceManager)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockEndpointServiceManager) Delete(arg0 context.Context, arg1 networking.VPCEndpointServiceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEndpointServiceManagerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEndpointServiceManager)(nil).Delete), arg0, arg1)
}

// ReconcilePermissions mocks base method.
func (m *MockEndpointServiceManager) ReconcilePermissions(arg0 context.Context, arg1 *ec2.VPCEndpointServicePermissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePermissions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePermissions indicates an expected call of ReconcilePermissions.
func (mr *MockEndpointServiceManagerMockRecorder) ReconcilePermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePermissions", reflect.TypeOf((*MockEndpointServiceManager)(nil).ReconcilePermissions), arg0, arg1)
}

// Update mocks base method.
func (m *MockEndpointServiceManager) Update(arg0 context.Context, arg1 *ec2.VPCEndpointService, arg2 networking.VPCEndpointServiceInfo) (ec2.VPCEndpointServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(ec2.VPCEndpointServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEndpointServiceManagerMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEndpointServiceManager)(nil).Update), arg0, arg1, arg2)
}
