// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/deploy/ec2 (interfaces: TaggingManager)

// Package ec2 is a generated GoMock package.
package ec2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tracking "sigs.k8s.io/aws-load-balancer-controller/pkg/deploy/tracking"
	networking "sigs.k8s.io/aws-load-balancer-controller/pkg/networking"
)

// MockTaggingManager is a mock of TaggingManager interface.
type MockTaggingManager struct {
	ctrl     *gomock.Controller
	recorder *MockTaggingManagerMockRecorder
}

// MockTaggingManagerMockRecorder is the mock recorder for MockTaggingManager.
type MockTaggingManagerMockRecorder struct {
	mock *MockTaggingManager
}

// NewMockTaggingManager creates a new mock instance.
func NewMockTaggingManager(ctrl *gomock.Controller) *MockTaggingManager {
	mock := &MockTaggingManager{ctrl: ctrl}
	mock.recorder = &MockTaggingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaggingManager) EXPECT() *MockTaggingManagerMockRecorder {
	return m.recorder
}

// ListSecurityGroups mocks base method.
func (m *MockTaggingManager) ListSecurityGroups(arg0 context.Context, arg1 ...tracking.TagFilter) ([]networking.SecurityGroupInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityGroups", varargs...)
	ret0, _ := ret[0].([]networking.SecurityGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockTaggingManagerMockRecorder) ListSecurityGroups(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockTaggingManager)(nil).ListSecurityGroups), varargs...)
}

// ListVPCEndpointServices mocks base method.
func (m *MockTaggingManager) ListVPCEndpointServices(arg0 context.Context, arg1 ...tracking.TagFilter) ([]networking.VPCEndpointServiceInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVPCEndpointServices", varargs...)
	ret0, _ := ret[0].([]networking.VPCEndpointServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCEndpointServices indicates an expected call of ListVPCEndpointServices.
func (mr *MockTaggingManagerMockRecorder) ListVPCEndpointServices(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCEndpointServices", reflect.TypeOf((*MockTaggingManager)(nil).ListVPCEndpointServices), varargs...)
}

// ReconcileTags mocks base method.
func (m *MockTaggingManager) ReconcileTags(arg0 context.Context, arg1 string, arg2 map[string]string, arg3 ...ReconcileTagsOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReconcileTags", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTags indicates an expected call of ReconcileTags.
func (mr *MockTaggingManagerMockRecorder) ReconcileTags(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTags", reflect.TypeOf((*MockTaggingManager)(nil).ReconcileTags), varargs...)
}
