// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/deploy/wafv2 (interfaces: WebACLAssociationManager)

// Package wafv2 is a generated GoMock package.
package wafv2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebACLAssociationManager is a mock of WebACLAssociationManager interface.
type MockWebACLAssociationManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebACLAssociationManagerMockRecorder
}

// MockWebACLAssociationManagerMockRecorder is the mock recorder for MockWebACLAssociationManager.
type MockWebACLAssociationManagerMockRecorder struct {
	mock *MockWebACLAssociationManager
}

// NewMockWebACLAssociationManager creates a new mock instance.
func NewMockWebACLAssociationManager(ctrl *gomock.Controller) *MockWebACLAssociationManager {
	mock := &MockWebACLAssociationManager{ctrl: ctrl}
	mock.recorder = &MockWebACLAssociationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebACLAssociationManager) EXPECT() *MockWebACLAssociationManagerMockRecorder {
	return m.recorder
}

// AssociateWebACL mocks base method.
func (m *MockWebACLAssociationManager) AssociateWebACL(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateWebACL indicates an expected call of AssociateWebACL.
func (mr *MockWebACLAssociationManagerMockRecorder) AssociateWebACL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACL", reflect.TypeOf((*MockWebACLAssociationManager)(nil).AssociateWebACL), arg0, arg1, arg2)
}

// DisassociateWebACL mocks base method.
func (m *MockWebACLAssociationManager) DisassociateWebACL(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateWebACL indicates an expected call of DisassociateWebACL.
func (mr *MockWebACLAssociationManagerMockRecorder) DisassociateWebACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACL", reflect.TypeOf((*MockWebACLAssociationManager)(nil).DisassociateWebACL), arg0, arg1)
}

// GetAssociatedWebACL mocks base method.
func (m *MockWebACLAssociationManager) GetAssociatedWebACL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociatedWebACL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedWebACL indicates an expected call of GetAssociatedWebACL.
func (mr *MockWebACLAssociationManagerMockRecorder) GetAssociatedWebACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedWebACL", reflect.TypeOf((*MockWebACLAssociationManager)(nil).GetAssociatedWebACL), arg0, arg1)
}
