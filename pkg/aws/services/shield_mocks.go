// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/aws/services (interfaces: Shield)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	shield "github.com/aws/aws-sdk-go-v2/service/shield"
	gomock "github.com/golang/mock/gomock"
)

// MockShield is a mock of Shield interface.
type MockShield struct {
	ctrl     *gomock.Controller
	recorder *MockShieldMockRecorder
}

// MockShieldMockRecorder is the mock recorder for MockShield.
type MockShieldMockRecorder struct {
	mock *MockShield
}

// NewMockShield creates a new mock instance.
func NewMockShield(ctrl *gomock.Controller) *MockShield {
	mock := &MockShield{ctrl: ctrl}
	mock.recorder = &MockShieldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShield) EXPECT() *MockShieldMockRecorder {
	return m.recorder
}

// CreateProtectionWithContext mocks base method.
func (m *MockShield) CreateProtectionWithContext(arg0 context.Context, arg1 *shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectionWithContext", arg0, arg1)
	ret0, _ := ret[0].(*shield.CreateProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectionWithContext indicates an expected call of CreateProtectionWithContext.
func (mr *MockShieldMockRecorder) CreateProtectionWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectionWithContext", reflect.TypeOf((*MockShield)(nil).CreateProtectionWithContext), arg0, arg1)
}

// DeleteProtectionWithContext mocks base method.
func (m *MockShield) DeleteProtectionWithContext(arg0 context.Context, arg1 *shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProtectionWithContext", arg0, arg1)
	ret0, _ := ret[0].(*shield.DeleteProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProtectionWithContext indicates an expected call of DeleteProtectionWithContext.
func (mr *MockShieldMockRecorder) DeleteProtectionWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProtectionWithContext", reflect.TypeOf((*MockShield)(nil).DeleteProtectionWithContext), arg0, arg1)
}

// DescribeProtectionWithContext mocks base method.
func (m *MockShield) DescribeProtectionWithContext(arg0 context.Context, arg1 *shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectionWithContext", arg0, arg1)
	ret0, _ := ret[0].(*shield.DescribeProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectionWithContext indicates an expected call of DescribeProtectionWithContext.
func (mr *MockShieldMockRecorder) DescribeProtectionWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectionWithContext", reflect.TypeOf((*MockShield)(nil).DescribeProtectionWithContext), arg0, arg1)
}

// GetSubscriptionStateWithContext mocks base method.
func (m *MockShield) GetSubscriptionStateWithContext(arg0 context.Context, arg1 *shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionStateWithContext", arg0, arg1)
	ret0, _ := ret[0].(*shield.GetSubscriptionStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionStateWithContext indicates an expected call of GetSubscriptionStateWithContext.
func (mr *MockShieldMockRecorder) GetSubscriptionStateWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionStateWithContext", reflect.TypeOf((*MockShield)(nil).GetSubscriptionStateWithContext), arg0, arg1)
}
