// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/aws/services (interfaces: ACM)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	acm "github.com/aws/aws-sdk-go-v2/service/acm"
	types "github.com/aws/aws-sdk-go-v2/service/acm/types"
	gomock "github.com/golang/mock/gomock"
)

// MockACM is a mock of ACM interface.
type MockACM struct {
	ctrl     *gomock.Controller
	recorder *MockACMMockRecorder
}

// MockACMMockRecorder is the mock recorder for MockACM.
type MockACMMockRecorder struct {
	mock *MockACM
}

// NewMockACM creates a new mock instance.
func NewMockACM(ctrl *gomock.Controller) *MockACM {
	mock := &MockACM{ctrl: ctrl}
	mock.recorder = &MockACMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACM) EXPECT() *MockACMMockRecorder {
	return m.recorder
}

// DescribeCertificateWithContext mocks base method.
func (m *MockACM) DescribeCertificateWithContext(arg0 context.Context, arg1 *acm.DescribeCertificateInput) (*acm.DescribeCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateWithContext", arg0, arg1)
	ret0, _ := ret[0].(*acm.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateWithContext indicates an expected call of DescribeCertificateWithContext.
func (mr *MockACMMockRecorder) DescribeCertificateWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateWithContext", reflect.TypeOf((*MockACM)(nil).DescribeCertificateWithContext), arg0, arg1)
}

// ListCertificatesAsList mocks base method.
func (m *MockACM) ListCertificatesAsList(arg0 context.Context, arg1 *acm.ListCertificatesInput) ([]types.CertificateSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesAsList", arg0, arg1)
	ret0, _ := ret[0].([]types.CertificateSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesAsList indicates an expected call of ListCertificatesAsList.
func (mr *MockACMMockRecorder) ListCertificatesAsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesAsList", reflect.TypeOf((*MockACM)(nil).ListCertificatesAsList), arg0, arg1)
}
