// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/aws/services (interfaces: WAFv2)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	wafv2 "github.com/aws/aws-sdk-go-v2/service/wafv2"
	gomock "github.com/golang/mock/gomock"
)

// MockWAFv2 is a mock of WAFv2 interface.
type MockWAFv2 struct {
	ctrl     *gomock.Controller
	recorder *MockWAFv2MockRecorder
}

// MockWAFv2MockRecorder is the mock recorder for MockWAFv2.
type MockWAFv2MockRecorder struct {
	mock *MockWAFv2
}

// NewMockWAFv2 creates a new mock instance.
func NewMockWAFv2(ctrl *gomock.Controller) *MockWAFv2 {
	mock := &MockWAFv2{ctrl: ctrl}
	mock.recorder = &MockWAFv2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFv2) EXPECT() *MockWAFv2MockRecorder {
	return m.recorder
}

// AssociateWebACLWithContext mocks base method.
func (m *MockWAFv2) AssociateWebACLWithContext(arg0 context.Context, arg1 *wafv2.AssociateWebACLInput) (*wafv2.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACLWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafv2.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACLWithContext indicates an expected call of AssociateWebACLWithContext.
func (mr *MockWAFv2MockRecorder) AssociateWebACLWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLWithContext", reflect.TypeOf((*MockWAFv2)(nil).AssociateWebACLWithContext), arg0, arg1)
}

// DisassociateWebACLWithContext mocks base method.
func (m *MockWAFv2) DisassociateWebACLWithContext(arg0 context.Context, arg1 *wafv2.DisassociateWebACLInput) (*wafv2.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACLWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafv2.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACLWithContext indicates an expected call of DisassociateWebACLWithContext.
func (mr *MockWAFv2MockRecorder) DisassociateWebACLWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLWithContext", reflect.TypeOf((*MockWAFv2)(nil).DisassociateWebACLWithContext), arg0, arg1)
}

// GetWebACLForResourceWithContext mocks base method.
func (m *MockWAFv2) GetWebACLForResourceWithContext(arg0 context.Context, arg1 *wafv2.GetWebACLForResourceInput) (*wafv2.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResourceWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafv2.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResourceWithContext indicates an expected call of GetWebACLForResourceWithContext.
func (mr *MockWAFv2MockRecorder) GetWebACLForResourceWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceWithContext", reflect.TypeOf((*MockWAFv2)(nil).GetWebACLForResourceWithContext), arg0, arg1)
}
