// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/aws/services (interfaces: WAFRegional)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	wafregional "github.com/aws/aws-sdk-go-v2/service/wafregional"
	gomock "github.com/golang/mock/gomock"
)

// MockWAFRegional is a mock of WAFRegional interface.
type MockWAFRegional struct {
	ctrl     *gomock.Controller
	recorder *MockWAFRegionalMockRecorder
}

// MockWAFRegionalMockRecorder is the mock recorder for MockWAFRegional.
type MockWAFRegionalMockRecorder struct {
	mock *MockWAFRegional
}

// NewMockWAFRegional creates a new mock instance.
func NewMockWAFRegional(ctrl *gomock.Controller) *MockWAFRegional {
	mock := &MockWAFRegional{ctrl: ctrl}
	mock.recorder = &MockWAFRegionalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFRegional) EXPECT() *MockWAFRegionalMockRecorder {
	return m.recorder
}

// AssociateWebACLWithContext mocks base method.
func (m *MockWAFRegional) AssociateWebACLWithContext(arg0 context.Context, arg1 *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACLWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafregional.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACLWithContext indicates an expected call of AssociateWebACLWithContext.
func (mr *MockWAFRegionalMockRecorder) AssociateWebACLWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLWithContext", reflect.TypeOf((*MockWAFRegional)(nil).AssociateWebACLWithContext), arg0, arg1)
}

// Available mocks base method.
func (m *MockWAFRegional) Available() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Available indicates an expected call of Available.
func (mr *MockWAFRegionalMockRecorder) Available() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockWAFRegional)(nil).Available))
}

// DisassociateWebACLWithContext mocks base method.
func (m *MockWAFRegional) DisassociateWebACLWithContext(arg0 context.Context, arg1 *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACLWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafregional.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACLWithContext indicates an expected call of DisassociateWebACLWithContext.
func (mr *MockWAFRegionalMockRecorder) DisassociateWebACLWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLWithContext", reflect.TypeOf((*MockWAFRegional)(nil).DisassociateWebACLWithContext), arg0, arg1)
}

// GetWebACLForResourceWithContext mocks base method.
func (m *MockWAFRegional) GetWebACLForResourceWithContext(arg0 context.Context, arg1 *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResourceWithContext", arg0, arg1)
	ret0, _ := ret[0].(*wafregional.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResourceWithContext indicates an expected call of GetWebACLForResourceWithContext.
func (mr *MockWAFRegionalMockRecorder) GetWebACLForResourceWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceWithContext", reflect.TypeOf((*MockWAFRegional)(nil).GetWebACLForResourceWithContext), arg0, arg1)
}
